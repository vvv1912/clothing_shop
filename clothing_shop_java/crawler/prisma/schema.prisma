generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model order {
  delivery_fee           Float?
  payment_method         Int          @db.TinyInt
  promotion_promotion_id Int?
  status                 Int?         @db.TinyInt
  total_amount           Int?
  completed_date         DateTime?    @db.DateTime(6)
  created_date           DateTime?    @db.DateTime(6)
  phone_number           String?      @db.VarChar(20)
  order_id               String       @id @db.VarChar(36)
  customer_name          String?      @db.VarChar(100)
  email                  String?      @db.VarChar(100)
  address                String?      @db.VarChar(500)
  cancel_reason          String?      @db.VarChar(500)
  note                   String?      @db.VarChar(500)
  user_user_id           String?      @db.VarChar(255)
  promotion              promotion?   @relation(fields: [promotion_promotion_id], references: [promotion_id], onDelete: Restrict, onUpdate: Restrict, map: "FKkgpbw4fb1s5r7v0tlathrxp7s")
  user                   user?        @relation(fields: [user_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "FKktqkl7kou3pykq8fnm4rr9jmy")
  order_item             order_item[]
  payment                payment[]
  rating                 rating[]

  @@index([promotion_promotion_id], map: "FKkgpbw4fb1s5r7v0tlathrxp7s")
  @@index([user_user_id], map: "FKktqkl7kou3pykq8fnm4rr9jmy")
  @@map("_order")
}

model brand {
  brand_id           Int       @id @default(autoincrement())
  created_by         String?   @db.VarChar(255)
  created_date       DateTime? @db.DateTime(6)
  last_modified_by   String?   @db.VarChar(255)
  last_modified_date DateTime? @db.DateTime(6)
  deleted_date       DateTime? @db.DateTime(6)
  name               String?   @db.VarChar(255)
}

model cart_item {
  product_option_id Int
  quantity          Int
  user_id           String         @db.VarChar(255)
  user              user           @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FKjnaj4sjyqjkr4ivemf9gb25w")
  product_option    product_option @relation(fields: [product_option_id], references: [product_option_id], onUpdate: Restrict, map: "FKqxba177rqvv0cfr83bq1g396a")

  @@id([product_option_id, user_id])
  @@index([user_id], map: "FKjnaj4sjyqjkr4ivemf9gb25w")
}

model category {
  category_id        Int        @id @default(autoincrement())
  parent_category_id Int?
  created_date       DateTime?  @db.DateTime(6)
  deleted_date       DateTime?  @db.DateTime(6)
  name               String     @unique(map: "UK_46ccwnsi9409t36lurvtyljak") @db.VarChar(100)
  category           category?  @relation("categoryTocategory", fields: [parent_category_id], references: [category_id], onDelete: Restrict, onUpdate: Restrict, map: "FKs2ride9gvilxy2tcuv7witnxc")
  other_category     category[] @relation("categoryTocategory")
  product            product[]

  @@index([parent_category_id], map: "FKs2ride9gvilxy2tcuv7witnxc")
}

model color {
  color_id       Int              @id @default(autoincrement())
  created_date   DateTime?        @db.DateTime(6)
  image          String?          @db.VarChar(255)
  name           String?          @db.VarChar(255)
  product_image  product_image[]
  product_option product_option[]
}

model order_item {
  price             Float
  product_option_id Int
  quantity          Int
  order_id          String         @db.VarChar(255)
  order             order          @relation(fields: [order_id], references: [order_id], onUpdate: Restrict, map: "FKryn1sdluxcjfeu891k75myheu")
  product_option    product_option @relation(fields: [product_option_id], references: [product_option_id], onUpdate: Restrict, map: "FKsoimewh387var4rtx7v1wa2wv")

  @@id([product_option_id, order_id])
  @@index([order_id], map: "FKryn1sdluxcjfeu891k75myheu")
}

model payment {
  amount         Int
  status         Int       @db.TinyInt
  completed_date DateTime? @db.DateTime(6)
  created_date   DateTime? @db.DateTime(6)
  order_order_id String?   @db.VarChar(36)
  payment_id     String    @id @db.VarChar(36)
  order          order?    @relation(fields: [order_order_id], references: [order_id], onDelete: Restrict, onUpdate: Restrict, map: "FKhobhqk8v7ohgfr56r725x80y5")

  @@index([order_order_id], map: "FKhobhqk8v7ohgfr56r725x80y5")
}

model permission {
  display_name     String             @db.VarChar(50)
  normalized_name  String             @id @db.VarChar(50)
  description      String?            @db.VarChar(100)
  role_permissions role_permissions[] @ignore
}

model persistent_logins {
  username  String   @db.VarChar(64)
  series    String   @id @db.VarChar(64)
  token     String   @db.VarChar(64)
  last_used DateTime @default(now()) @db.Timestamp(0)
}

model product {
  average_rating       Float            @default(0) @db.Float
  category_category_id Int?
  discount             Int
  for_gender           Int              @db.TinyInt
  price                Int
  product_id           Int              @id @default(autoincrement())
  total_sold           Int
  created_date         DateTime?        @db.DateTime(6)
  deleted_date         DateTime?        @db.DateTime(6)
  description          String           @db.Text
  display_image        String           @db.VarChar(255)
  name                 String           @db.VarChar(255)
  slug                 String           @unique(map: "UK_88yb4l9100epddqsrdvxerhq9") @db.VarChar(255)
  category             category?        @relation(fields: [category_category_id], references: [category_id], onDelete: Restrict, onUpdate: Restrict, map: "FKle1pobdrc8a2uw97gukfmvan4")
  product_image        product_image[]
  product_option       product_option[]

  @@index([category_category_id], map: "FKle1pobdrc8a2uw97gukfmvan4")
}

model product_image {
  for_color_color_id Int?
  product_product_id Int?
  created_date       DateTime? @db.DateTime(6)
  url                String    @id @db.VarChar(500)
  product            product?  @relation(fields: [product_product_id], references: [product_id], onDelete: Restrict, onUpdate: Restrict, map: "FK4emctl4klpqjbh93ho5q8pvik")
  color              color?    @relation(fields: [for_color_color_id], references: [color_id], onDelete: Restrict, onUpdate: Restrict, map: "FK639aj7pfoet24fjm1fkkh0q8m")

  @@index([product_product_id], map: "FK4emctl4klpqjbh93ho5q8pvik")
  @@index([for_color_color_id], map: "FK639aj7pfoet24fjm1fkkh0q8m")
}

model product_option {
  color_color_id     Int?
  product_option_id  Int                  @id @default(autoincrement())
  product_product_id Int?
  stock              Int
  created_date       DateTime?            @db.DateTime(6)
  deleted_date       DateTime?            @db.DateTime(6)
  size               String               @db.VarChar(50)
  cart_item          cart_item[]
  order_item         order_item[]
  color              color?               @relation(fields: [color_color_id], references: [color_id], onDelete: Restrict, onUpdate: Restrict, map: "FK19qrg9y80nlioamtmiq57lukp")
  product            product?             @relation(fields: [product_product_id], references: [product_id], onDelete: Restrict, onUpdate: Restrict, map: "FKf135hq0tq3mo9dttbfhcidbac")
  rating             rating[]
  stock_receipt_item stock_receipt_item[]

  @@index([color_color_id], map: "FK19qrg9y80nlioamtmiq57lukp")
  @@index([product_product_id], map: "FKf135hq0tq3mo9dttbfhcidbac")
}

model promotion {
  active           Boolean   @db.Bit(1)
  discount         Int
  max_value        Int?
  min_order_amount Int?
  promotion_id     Int       @id @default(autoincrement())
  stock            Int
  type             Int       @db.TinyInt
  created_date     DateTime? @db.DateTime(6)
  end_date         DateTime  @db.DateTime(6)
  start_date       DateTime  @db.DateTime(6)
  code             String    @unique(map: "UK_lomfalb6gsh66ox4gy0t2g7qw") @db.VarChar(100)
  name             String    @db.VarChar(100)
  description      String?   @db.VarChar(255)
  order            order[]
}

model rating {
  id                               Int             @id @default(autoincrement())
  product_option_product_option_id Int?
  value                            Int
  created_date                     DateTime?       @db.DateTime(6)
  order_order_id                   String?         @db.VarChar(36)
  content                          String?         @db.VarChar(255)
  user_user_id                     String?         @db.VarChar(255)
  product_option                   product_option? @relation(fields: [product_option_product_option_id], references: [product_option_id], onDelete: Restrict, onUpdate: Restrict, map: "FK3q8esamm24cgorp8h5k3ebb4b")
  user                             user?           @relation(fields: [user_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "FKc4t8k6ukp833gbb9dr9ejvnij")
  order                            order?          @relation(fields: [order_order_id], references: [order_id], onDelete: Restrict, onUpdate: Restrict, map: "FKtnd684vk2p4ix87w9tixxltyr")

  @@index([product_option_product_option_id], map: "FK3q8esamm24cgorp8h5k3ebb4b")
  @@index([user_user_id], map: "FKc4t8k6ukp833gbb9dr9ejvnij")
  @@index([order_order_id], map: "FKtnd684vk2p4ix87w9tixxltyr")
}

model role {
  created_date     DateTime?          @db.DateTime(6)
  display_name     String             @db.VarChar(50)
  normalized_name  String             @id @db.VarChar(50)
  description      String?            @db.VarChar(100)
  role_permissions role_permissions[] @ignore
  user_roles       user_roles[]       @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model role_permissions {
  permission_id String     @db.VarChar(50)
  role_id       String     @db.VarChar(50)
  permission    permission @relation(fields: [permission_id], references: [normalized_name], onUpdate: Restrict, map: "FKh0v7u4w7mttcu81o8wegayr8e")
  role          role       @relation(fields: [role_id], references: [normalized_name], onUpdate: Restrict, map: "FKlodb7xh4a2xjv39gc3lsop95n")

  @@index([permission_id], map: "FKh0v7u4w7mttcu81o8wegayr8e")
  @@index([role_id], map: "FKlodb7xh4a2xjv39gc3lsop95n")
  @@ignore
}

model stock_receipt {
  stock_receipt_id     Int                  @id @default(autoincrement())
  supplier_supplier_id Int?
  total                Int
  created_date         DateTime?            @db.DateTime(6)
  note                 String?              @db.VarChar(255)
  supplier             supplier?            @relation(fields: [supplier_supplier_id], references: [supplier_id], onDelete: Restrict, onUpdate: Restrict, map: "FK678jx4bl2bkhm462ayepips03")
  stock_receipt_item   stock_receipt_item[]

  @@index([supplier_supplier_id], map: "FK678jx4bl2bkhm462ayepips03")
}

model stock_receipt_item {
  price             Int
  product_option_id Int
  quantity          Int
  stock_receipt_id  Int
  product_option    product_option @relation(fields: [product_option_id], references: [product_option_id], onUpdate: Restrict, map: "FK4kcswjsn2tyx8q33uh4pe0hd6")
  stock_receipt     stock_receipt  @relation(fields: [stock_receipt_id], references: [stock_receipt_id], onUpdate: Restrict, map: "FKkbjrplw2p70quxcawmoia5efu")

  @@id([product_option_id, stock_receipt_id])
  @@index([stock_receipt_id], map: "FKkbjrplw2p70quxcawmoia5efu")
}

model supplier {
  supplier_id   Int             @id @default(autoincrement())
  deleted_date  DateTime?       @db.DateTime(6)
  address       String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  email         String?         @db.VarChar(255)
  name          String?         @db.VarChar(255)
  phone         String?         @db.VarChar(255)
  stock_receipt stock_receipt[]
}

model user {
  is_account_enabled Boolean      @db.Bit(1)
  is_customer        Boolean      @db.Bit(1)
  is_email_verified  Boolean      @db.Bit(1)
  created_at         DateTime?    @db.DateTime(6)
  email              String       @unique(map: "UK_ob8kqyqqgmefl0aco34akdtpe") @db.VarChar(100)
  first_name         String       @db.VarChar(100)
  last_name          String       @db.VarChar(100)
  password_hash      String       @db.VarChar(100)
  phone_number       String?      @db.VarChar(100)
  avatar_url         String?      @db.VarChar(200)
  address            String?      @db.VarChar(500)
  user_id            String       @id @db.VarChar(255)
  order              order[]
  cart_item          cart_item[]
  rating             rating[]
  user_roles         user_roles[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_roles {
  normalized_name String @db.VarChar(50)
  user_id         String @db.VarChar(255)
  user            user   @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK55itppkw3i07do3h7qoclqd4k")
  role            role   @relation(fields: [normalized_name], references: [normalized_name], onUpdate: Restrict, map: "FKl4wmn6fu283xgevynrmicn4s4")

  @@index([user_id], map: "FK55itppkw3i07do3h7qoclqd4k")
  @@index([normalized_name], map: "FKl4wmn6fu283xgevynrmicn4s4")
  @@ignore
}
